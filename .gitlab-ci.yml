---
stages:
  - linting
  - formatting
  - test
  - build
  - push-to-registry
  - deploy

services:
  - docker:dind

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - venv/
    - ~/.cache/pip

# Docker Linting
hadolint:
  stage: linting
  only:
  - master
  image: registry.gitlab.com/pipeline-components/hadolint:latest
  script:
    - hadolint *.dockerfile
    - cd api
    - hadolint *.dockerfile


# Python Linting
black:
  stage: linting
  only:
  - master
  image: registry.gitlab.com/pipeline-components/black:latest
  script:
    - black --check --verbose -- .

# Bash Linting
shell check:
  image: koalaman/shellcheck-alpine:stable
  stage: linting
  only:
  - master
  before_script:
    - shellcheck --version
  script:
    - shellcheck scripts/*.sh

# Bash Formatting
shfmt:
  image: mvdan/shfmt:v3.2.0-alpine
  stage: formatting
  only:
  - master
  before_script:
    - shfmt -version
  script:
    - shfmt -i 2 -ci -d scripts/

# Python unit tests
unit test:
  stage: test
  only:
  - master
  image: python:3.11
  script:
    - pip install -r requirements.txt
    - pip install --upgrade pip
    - coverage run -m unittest
    - coverage report
    - coverage xml
  coverage: '/TOTAL.*\s([.\d]+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build Docker images:
  stage: build
  only:
   - main
  image: docker:latest
  before_script:
    - apk add --no-cache --upgrade make ca-certificates openssl python3 bash
    - update-ca-certificates
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - google-cloud-sdk/bin/gcloud --quiet components update
    - google-cloud-sdk/bin/gcloud auth configure-docker europe-west1-docker.pkg.dev
    - cat $GCLOUD_SERVICE_KEY | base64 | docker login -u _json_key_base64 --password-stdin https://europe-west1-docker.pkg.dev
  script:
    - cd scripts/
    - chmod +x build_images.sh
    - ./build_images.sh

deploy on GCP:
  stage: deploy
  only:
   - main
  image: google/cloud-sdk
  before_script:
    - cat $GCLOUD_SERVICE_KEY | base64 | docker login -u _json_key_base64 --password-stdin https://eu.gcr.io
  script:
  - gcloud auth activate-service-account --key-file=$GCLOUD_SERVICE_KEY
  - gcloud config set project $GCP_PROJECT_NAME
  - gcloud config set container/cluster cluster-1
  - gcloud config set compute/zone europe-west1-b
  - gcloud container clusters get-credentials $GKE_CLUSTER_NAME --zone europe-west1-b --project $GCP_PROJECT_NAME
  - cd scripts
  - chmod +x deploy.sh
  - ./deploy.sh
