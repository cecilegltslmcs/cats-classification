---
stages:
  - linting
  - formatting
  - test
  - deploy

before_script:
  - export GOOGLE_CREDENTIALS=$(echo $BASE64_GOOGLE_CREDENTIALS | base64 -d)

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - venv/
    - ~/.cache/pip

# Docker Linting
hadolint:
  stage: linting
  image: registry.gitlab.com/pipeline-components/hadolint:latest
  script:
    - hadolint *.dockerfile
    - cd api
    - hadolint *.dockerfile


# Python Linting
black:
  stage: linting
  image: registry.gitlab.com/pipeline-components/black:latest
  script:
    - black --check --verbose -- .

# Bash Linting
shell check:
  image: koalaman/shellcheck-alpine:stable
  stage: linting
  before_script:
    - shellcheck --version
  script:
    - shellcheck scripts/*.sh

# Bash Formatting
shfmt:
  image: mvdan/shfmt:v3.2.0-alpine
  stage: formatting
  before_script:
    - shfmt -version
  script:
    - shfmt -i 2 -ci -d scripts/

# Python unit tests
unit test:
  stage: test
  image: python:3.11
  script:
    - pip install -r requirements.txt
    - pip install --upgrade pip
    - coverage run -m unittest
    - coverage report
    - coverage xml
  coverage: '/TOTAL.*\s([.\d]+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

deploy-job:
  stage: deploy
  script:
    - echo "Pipeline finished!"
  only:
    - main
